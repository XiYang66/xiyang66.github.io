import{_ as n,c as a,a as p,o as e}from"./app-BJ3_yarB.js";const t={};function l(o,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h2 id="初步认识" tabindex="-1"><a class="header-anchor" href="#初步认识"><span>初步认识</span></a></h2><p>通过使用类的方式来定义一个对象</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"> <span class="token keyword">interface</span> <span class="token class-name">Iperson</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">firstName</span><span class="token operator">:</span>string<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">lastName</span><span class="token operator">:</span>string</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 定义公共的字段</span></span>
<span class="line">    <span class="token literal-property property">firstName</span><span class="token operator">:</span>string<span class="token comment">//姓氏</span></span>
<span class="line">    <span class="token literal-property property">lastName</span><span class="token operator">:</span>string<span class="token comment">//名字</span></span>
<span class="line">    <span class="token literal-property property">fullName</span><span class="token operator">:</span>string<span class="token comment">//名字</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">firstName</span><span class="token operator">:</span>string<span class="token punctuation">,</span><span class="token literal-property property">lastName</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">=</span>firstName</span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token operator">=</span>lastName</span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>fullName<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">&#39;-&#39;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 实例化对象</span></span>
<span class="line">  <span class="token keyword">const</span> person<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;卧龙&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;凤雏&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">showFullName</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">person</span><span class="token operator">:</span>Iperson</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">&#39;-&#39;</span><span class="token operator">+</span>person<span class="token punctuation">.</span>lastName</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">showFullName</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例化的对象的时候通过类中constructor构建函数来复制公共字段中的变量，类本身也是一个对象</p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2><blockquote><p>继承属于类与类之间的关系，发生继承就会出现子类和父类之间的关系 子类又叫派生类，父类也叫基类，例如：我特别帅，我的儿子继承啦我的颜值也特比帅</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 父类</span></span>
<span class="line">  <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span>string</span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span>number</span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span>string<span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name</span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,你是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 子类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span>string<span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是子类的方法&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">&#39;帅哥&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//实例化Person</span></span>
<span class="line"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;路飞&#39;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span></span>
<span class="line">person<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">&#39;索隆&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//实例化Student</span></span>
<span class="line"><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;乔巴&#39;</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span></span>
<span class="line">stu<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="公共、私有、受保护修饰符" tabindex="-1"><a class="header-anchor" href="#公共、私有、受保护修饰符"><span>公共、私有、受保护修饰符</span></a></h2><ul><li>public <ul><li>public是类默认的属性，公共的意思，任何地方都可以访问类中的成员</li></ul></li><li>private <ul><li>类中的成员如果用他来修饰，外部是无法访问这个成员属性的，子类也不行</li></ul></li><li>protected <ul><li>类中的成员如果用他来修饰，外部是无法访问这个成员属性的，子类可以</li></ul></li></ul><h2 id="readonly只读修饰符" tabindex="-1"><a class="header-anchor" href="#readonly只读修饰符"><span>readonly只读修饰符</span></a></h2><p>readonly队成员修饰后，该成员就不能再外部被随意修改</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span></span>
<span class="line">  readonly name<span class="token operator">:</span>string</span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//   this.name=&#39;罗宾&#39;   !!! 报错</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">person</span><span class="token operator">:</span>Person<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;娜美&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//   person.name=&#39;罗宾&#39;   !!! 报错</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="存取器" tabindex="-1"><a class="header-anchor" href="#存取器"><span>存取器</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">firstName</span><span class="token operator">:</span>string</span>
<span class="line">  <span class="token literal-property property">lastName</span><span class="token operator">:</span>string</span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">firstName</span><span class="token operator">:</span>string<span class="token punctuation">,</span><span class="token literal-property property">lastName</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">=</span>firstName</span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token operator">=</span>lastName</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">get</span> <span class="token function">fullNmae</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">&#39;_&#39;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">set</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> names<span class="token operator">=</span>val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">=</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token operator">=</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">person</span><span class="token operator">:</span>Person<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;蒙奇D&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;路飞&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 获取该成员属性</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 设置该成员属性</span></span>
<span class="line">person<span class="token punctuation">.</span>fullName<span class="token operator">=</span><span class="token string">&#39;罗罗诺亚_索隆&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员"><span>静态成员</span></a></h2><p>通过static修饰符的属性或者方法称作为静态成员属性</p><p>静态成员属性只能通过类名这种语法来调用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>c </span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span>string<span class="token operator">=</span><span class="token string">&#39;弗兰奇&#39;</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">seyHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;海侠-甚平&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 错误演示</span></span>
<span class="line"><span class="token keyword">const</span> person<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment">// ！！！错误</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 正确演示   不用创建实例对象就能调用 </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">Person<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;乔巴&#39;</span></span>
<span class="line">Person<span class="token punctuation">.</span><span class="token function">seyHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)]))}const i=n(t,[["render",l],["__file","lei.html.vue"]]),r=JSON.parse('{"path":"/blogs/TypeScript/lei.html","title":"类","lang":"en-US","frontmatter":{"title":"类","date":"2022-9-8","autoSort":9,"tags":["TypeScript"],"categories":["TypeScript"]},"headers":[{"level":2,"title":"初步认识","slug":"初步认识","link":"#初步认识","children":[]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":2,"title":"公共、私有、受保护修饰符","slug":"公共、私有、受保护修饰符","link":"#公共、私有、受保护修饰符","children":[]},{"level":2,"title":"readonly只读修饰符","slug":"readonly只读修饰符","link":"#readonly只读修饰符","children":[]},{"level":2,"title":"存取器","slug":"存取器","link":"#存取器","children":[]},{"level":2,"title":"静态成员","slug":"静态成员","link":"#静态成员","children":[]}],"git":{"createdTime":1728696783000,"updatedTime":1728696783000,"contributors":[{"name":"刘政杨","email":"314781333@qq.com","commits":1}]},"filePathRelative":"blogs/TypeScript/类.md"}');export{i as comp,r as data};
