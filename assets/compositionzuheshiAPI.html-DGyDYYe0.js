import{_ as s,c as a,a as e,o as p}from"./app-BJ3_yarB.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span>setup</span></a></h2><h3 id="简单用法" tabindex="-1"><a class="header-anchor" href="#简单用法"><span>简单用法</span></a></h3><blockquote><p>setup函数式Composition API的入口，在这里里面定义的变量，方法都需要return出去</p></blockquote><p>把vue2中的data和methods配置函数混在啦一起</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;路飞&#39;</span></span>
<span class="line">   <span class="token comment">//方法</span></span>
<span class="line">   <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,是要成为海贼王的男人！</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   <span class="token comment">//返回一个对象</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">,</span></span>
<span class="line">    say</span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="setup细节问题" tabindex="-1"><a class="header-anchor" href="#setup细节问题"><span>setup细节问题</span></a></h3><h4 id="执行时机" tabindex="-1"><a class="header-anchor" href="#执行时机"><span>执行时机</span></a></h4><ol><li>setup是在beforeCreate生命周期回调之前就执行，而且就执行了一次</li><li>setup在执行的时候，当前的组件没有被创建出来，组件实例对象this不能用</li><li>this是undefined，说明不能通过this调用data、computed、methods、props相关信息</li><li>其实所有的composition API相关回调函数都不可以</li></ol><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h4><ol><li>返回一个对象，为页面提供数据，在模板中可以直接使用此对象的方法和属性</li><li>返回对象中的属性和data函数中返回的对象属性合并</li><li>返回对象中的方法和methods方法合并</li><li>如果有重名setup优先</li><li>一般不要混合使用data和setup以及methods和setup</li><li>不能是一个async函数，因为返回值不在是一个对象而是一个promise</li></ol><h4 id="setup参数" tabindex="-1"><a class="header-anchor" href="#setup参数"><span>setup参数</span></a></h4><ul><li>props 接收父组件向子组件传递的数据</li><li>context <ul><li>attrs对象(获取组件标签上所有属性对象，即使props上没有生命定义接收的属性，他也能获取到该标签上的属性)</li><li>emit方法（分发事件）可以通过emit实现子传父，第一个参数是属性名字，第二个参数是传的值(相当于v2的this.$emit)</li><li>slots对象（插槽）</li></ul></li></ul><h2 id="ref与reactive" tabindex="-1"><a class="header-anchor" href="#ref与reactive"><span>ref与reactive</span></a></h2><h3 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>ref</span></a></h3><p>在setup中定义的变量不是响应式的，此时需要用ref将它变成响应式的</p><blockquote><p>ref函数会把变量变成对象，在修改的时候要.value去修改，页面上，vue3检测到时ref对象就自动给.value啦</p></blockquote><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span>ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> age<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      age<span class="token punctuation">.</span>value<span class="token operator">++</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">{</span></span>
<span class="line">      age<span class="token punctuation">,</span></span>
<span class="line">      setUser</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive"><span>reactive</span></a></h3><ul><li>比ref更好用，不用通过.value就可以改变数据</li><li>接收一个普通对象，返回一个proxy代理对象</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span>ref <span class="token punctuation">,</span>reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// import HelloWorld from &#39;./components/HelloWorld.vue&#39;;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// components: {</span></span>
<span class="line">  <span class="token comment">//   HelloWorld</span></span>
<span class="line">  <span class="token comment">// }</span></span>
<span class="line">  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      name<span class="token operator">:</span><span class="token string">&#39;路飞&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      age<span class="token operator">:</span><span class="token number">12</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      user<span class="token punctuation">.</span>age<span class="token operator">++</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">{</span></span>
<span class="line">      user<span class="token punctuation">,</span></span>
<span class="line">      setUser</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue2和vue3响应式原理不同" tabindex="-1"><a class="header-anchor" href="#vue2和vue3响应式原理不同"><span>vue2和vue3响应式原理不同</span></a></h3><p>vue2原理使用<code>Object.defineProperty</code>中的get和set进行数据劫持，他这样会存在一定的缺陷，当新增和删除的时候捕获不到，导致页面也不会更新</p><p>vue3中使用<code>proxy</code>(代理)连接对象对象中任意值的变换深度监听响应式的，再通过<code>Reflect</code>(反射)对源对象的属性进行操作</p><h2 id="computed-和-watch-计算属性和监听属性" tabindex="-1"><a class="header-anchor" href="#computed-和-watch-计算属性和监听属性"><span>computed 和 watch （计算属性和监听属性）</span></a></h2><p>在setup中使用需要在vue中引入 <code>import {...,computed,watch} from vue</code></p><h3 id="computed" tabindex="-1"><a class="header-anchor" href="#computed"><span>computed</span></a></h3><p>computed 必须有一个返回值</p><p>第一种写法，如果只传入一个回调函数，表示get</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">const</span> fullName1<span class="token operator">=</span><span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">return</span> user<span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">&#39;_&#39;</span><span class="token operator">+</span>user<span class="token punctuation">.</span>lastName</span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种写法，get 和 set</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">const</span> fullName2<span class="token operator">=</span><span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">     <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> user<span class="token punctuation">.</span>firstName <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> user<span class="token punctuation">.</span>lastName <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token operator">:</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        user<span class="token punctuation">.</span>firstName <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">        user<span class="token punctuation">.</span>lastName <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="watch" tabindex="-1"><a class="header-anchor" href="#watch"><span>watch</span></a></h3><p>监听单个</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">watch</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;user发生变换&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>监听多个</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>user<span class="token punctuation">,</span>age<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;user或age发什么变换&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>监视对象中的属性</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>user<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">firstName改变了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="watcheffect" tabindex="-1"><a class="header-anchor" href="#watcheffect"><span>watchEffect</span></a></h3><p>他是来跟watch抢饭碗的，是vue3新特性，默认开启immediate，用到了谁就监视谁</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> firstName<span class="token operator">=</span>user<span class="token punctuation">.</span>firstName</span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;🚀 ~ file: index.vue ~ line 52 ~ watchEffect ~ firstName&#39;</span><span class="token punctuation">,</span> firstName<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><p>在vue3中没有 <code>beforeCreate</code>与<code>created</code>,setup就相当于这两个生命周期函数</p><p>vue3声明周期需要在vux中引入 ，有些函数名字发生了变换 <code>import { 生命周期 } from &#39;vue&#39;</code></p><p>beforeMount ===&gt;onBeforeMount（dom元素加载之前，属性挂载完毕） mounted=======&gt;onMounted （dom元素加载完毕） beforeUpdate===&gt;onBeforeUpdate （dom元素更新之前） updated =======&gt;onUpdated （dom元素更新之后） beforeUnmount ==&gt;onBeforeUnmount (组件被卸载之前) unmounted =====&gt;onUnmounted （组件被销货）</p><h2 id="自定义hook" tabindex="-1"><a class="header-anchor" href="#自定义hook"><span>自定义hook</span></a></h2><p>相当于v2中的mixin混入，不同在与 hooks 是函数</p><p>hook函数能帮助我们提高代码的复用性，让我们在不同的组件中利用hooks函数</p><p>例子：获取鼠标点击位置 例如创建一个ts文件</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">,</span>onMounted<span class="token punctuation">,</span>onBeforeUnmount<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> x<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> y<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">savePoint</span><span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token operator">:</span>MouseEvent<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">.</span>value<span class="token operator">=</span>e<span class="token punctuation">.</span>pageX</span>
<span class="line">    y<span class="token punctuation">.</span>value<span class="token operator">=</span>e<span class="token punctuation">.</span>pageY</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>savePoint<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>savePoint<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">,</span></span>
<span class="line">    y</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在vue文件中引入</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">import</span> mousePosition <span class="token keyword">from</span> <span class="token string">&#39;@/hooks/mousePosition&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token operator">=</span><span class="token function">mousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">{</span></span>
<span class="line">        x<span class="token punctuation">,</span>y</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shallowreactive和shallowref" tabindex="-1"><a class="header-anchor" href="#shallowreactive和shallowref"><span>shallowReactive和shallowRef</span></a></h2><p>浅响应式，深层数据无法响应式修改</p><blockquote><p>shallowReactive : 只处理了对象内最外层属性的响应式(也就是浅响应式)</p></blockquote><blockquote><p>shallowRef: 只处理了value的响应式, 不进行对象的reactive处理</p></blockquote><ul><li>什么时候用浅响应式呢? <ul><li>一般情况下使用ref和reactive即可</li><li>如果有一个对象数据, 结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive</li><li>如果有一个对象数据, 后面会产生新的对象来替换 ===&gt; shallowRef</li></ul></li></ul><h2 id="readonly和shallowreadonly" tabindex="-1"><a class="header-anchor" href="#readonly和shallowreadonly"><span>readonly和shallowReadonly</span></a></h2><p>只读属性</p><ul><li>readonly <ul><li>深度只读数据</li><li>只读代理是深层的：访问的任何嵌套 property 也是只读的</li></ul></li><li>shallowReadonly <ul><li>浅只读数据</li><li>第一次是只读的，深层就不只读啦</li></ul></li></ul><h2 id="toraw-与-markraw" tabindex="-1"><a class="header-anchor" href="#toraw-与-markraw"><span>toRaw 与 markRaw</span></a></h2><ul><li>toRaw <ul><li>将响应式代理转换为普通对象</li></ul></li><li>markRaw <ul><li>标记一个对象，使其永远不会转换为代理</li><li>设置某些特定的值，当渲染具有不可变数据源的大列表时</li></ul></li></ul><h2 id="toref" tabindex="-1"><a class="header-anchor" href="#toref"><span>toRef</span></a></h2><ul><li>为源响应式对象上的某个属性创建一个 ref对象, 二者内部操作的是同一个数据值, 更新时二者是同步的</li><li>区别ref: 拷贝了一份新的数据值单独操作, 更新时相互不影响</li></ul><h2 id="customref" tabindex="-1"><a class="header-anchor" href="#customref"><span>customRef</span></a></h2><ul><li>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</li></ul><h2 id="provide-与-inject" tabindex="-1"><a class="header-anchor" href="#provide-与-inject"><span>provide 与 inject</span></a></h2><ul><li>实现跨层级组件(祖孙)间通信</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 爷爷   注册</span></span>
<span class="line"><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 孙子 获取</span></span>
<span class="line"><span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69)]))}const c=s(t,[["render",l],["__file","compositionzuheshiAPI.html.vue"]]),u=JSON.parse('{"path":"/blogs/VUE3/compositionzuheshiAPI.html","title":"composition组合式API","lang":"en-US","frontmatter":{"title":"composition组合式API","date":"2022-9-27","autoSort":20,"number":2,"tags":["VUE3"],"categories":["VUE3"]},"headers":[{"level":2,"title":"setup","slug":"setup","link":"#setup","children":[{"level":3,"title":"简单用法","slug":"简单用法","link":"#简单用法","children":[]},{"level":3,"title":"setup细节问题","slug":"setup细节问题","link":"#setup细节问题","children":[]}]},{"level":2,"title":"ref与reactive","slug":"ref与reactive","link":"#ref与reactive","children":[{"level":3,"title":"ref","slug":"ref","link":"#ref","children":[]},{"level":3,"title":"reactive","slug":"reactive","link":"#reactive","children":[]},{"level":3,"title":"vue2和vue3响应式原理不同","slug":"vue2和vue3响应式原理不同","link":"#vue2和vue3响应式原理不同","children":[]}]},{"level":2,"title":"computed 和 watch （计算属性和监听属性）","slug":"computed-和-watch-计算属性和监听属性","link":"#computed-和-watch-计算属性和监听属性","children":[{"level":3,"title":"computed","slug":"computed","link":"#computed","children":[]},{"level":3,"title":"watch","slug":"watch","link":"#watch","children":[]},{"level":3,"title":"watchEffect","slug":"watcheffect","link":"#watcheffect","children":[]}]},{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":2,"title":"自定义hook","slug":"自定义hook","link":"#自定义hook","children":[]},{"level":2,"title":"shallowReactive和shallowRef","slug":"shallowreactive和shallowref","link":"#shallowreactive和shallowref","children":[]},{"level":2,"title":"readonly和shallowReadonly","slug":"readonly和shallowreadonly","link":"#readonly和shallowreadonly","children":[]},{"level":2,"title":"toRaw 与 markRaw","slug":"toraw-与-markraw","link":"#toraw-与-markraw","children":[]},{"level":2,"title":"toRef","slug":"toref","link":"#toref","children":[]},{"level":2,"title":"customRef","slug":"customref","link":"#customref","children":[]},{"level":2,"title":"provide 与 inject","slug":"provide-与-inject","link":"#provide-与-inject","children":[]}],"git":{"createdTime":1728696783000,"updatedTime":1728696783000,"contributors":[{"name":"刘政杨","email":"314781333@qq.com","commits":1}]},"filePathRelative":"blogs/VUE3/composition组合式API.md"}');export{c as comp,u as data};
