import{_ as e,c as t,a,b as n,t as p,o as l}from"./app-BJ3_yarB.js";const o={};function i(c,s){return l(),t("div",null,[s[0]||(s[0]=a(`<h2 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令"><span>常用指令</span></a></h2><h3 id="v-if" tabindex="-1"><a class="header-anchor" href="#v-if"><span>v-if</span></a></h3><blockquote><p>用法：<code>&lt;h1 v-if=&quot;yes&quot;&gt;Yes!&lt;/h1&gt;</code></p></blockquote><ul><li>是条件渲染指令，它根据表达式的真假来删除和插入元素</li><li>会频繁卸载dom元素，频繁显示隐藏会有性能消耗</li></ul><h3 id="v-else" tabindex="-1"><a class="header-anchor" href="#v-else"><span>v-else</span></a></h3><blockquote><p>用法：<code>&lt;h1 v-else&gt;No!&lt;/h1&gt;</code></p></blockquote><ul><li>必须和v-if一起用才可以 不能单独用 而且必须在v-if下面中间有别的标签也会报错</li></ul><h3 id="v-show" tabindex="-1"><a class="header-anchor" href="#v-show"><span>v-show</span></a></h3><blockquote><p>用法：<code>&lt;h1 v-show=&quot;yes&quot;&gt;Yes!&lt;/h1&gt;</code></p></blockquote><ul><li>和v-if一样 区别是if是卸载掉 show隐藏</li><li>频繁卸载安装dom推荐使用</li></ul><h3 id="v-for" tabindex="-1"><a class="header-anchor" href="#v-for"><span>v-for</span></a></h3><blockquote><p>用法：<code>&lt;h1 v-for=&quot;item in items&quot;&gt;Yes!&lt;/h1&gt;</code></p></blockquote><ul><li>基于数组渲染一个列表，和js中for遍历语法类似</li><li>items是一个数组，item是当前被遍历的数组元素。</li></ul><h3 id="v-bind" tabindex="-1"><a class="header-anchor" href="#v-bind"><span>v-bind</span></a></h3><blockquote><p>用法：<code>&lt;h1 v-bind:argument=&quot;expression&quot;&gt;Yes!&lt;/h1&gt;</code> 简写：<code>&lt;h1 :argument=&quot;expression&quot;&gt;Yes!&lt;/h1&gt;</code></p></blockquote><ul><li>给改元素绑定值，冒号跟的通常是HTML元素的特性例如<code>:src</code></li><li>可用于常用父子传参</li></ul><h3 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model"><span>v-model</span></a></h3><blockquote><p>用法：<code>&lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;</code></p></blockquote><ul><li>让表单元素和数据实现双向绑定（映射关系）</li></ul><h3 id="v-on" tabindex="-1"><a class="header-anchor" href="#v-on"><span>v-on</span></a></h3><blockquote><p>用法：<code>&lt;a v-on:click=&quot;doSomething&quot;&gt;</code> 简写：<code>&lt;a @click=&quot;doSomething&quot;&gt;</code></p></blockquote><ul><li>指令用于给监听DOM事件，它的用语法和v-bind是类似的</li></ul><p>在调用事件的时候可以用修饰符来强化我们的代码 列入阻止事件冒泡，我们只需在结尾加上.stop修饰即可</p><p>事件修饰符</p><ul><li>.stop</li><li>.prevent</li><li>.capture</li><li>.self</li><li>.once</li><li>.passive</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 阻止单击事件继续传播 <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>a v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">&quot;doThis&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 提交事件不再重载页面 <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>form v<span class="token operator">-</span>on<span class="token operator">:</span>submit<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">&quot;onSubmit&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 修饰符可以串联 <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>a v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token punctuation">.</span>stop<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">&quot;doThat&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 只有修饰符 <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>form v<span class="token operator">-</span>on<span class="token operator">:</span>submit<span class="token punctuation">.</span>prevent<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加事件监听器时使用事件捕获模式 <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理 <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>div v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">&quot;doThis&quot;</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 只当在 event<span class="token punctuation">.</span>target 是当前元素自身时触发处理函数 <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 即事件不是从内部元素触发的 <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>div v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token punctuation">.</span>self<span class="token operator">=</span><span class="token string">&quot;doThat&quot;</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v-text" tabindex="-1"><a class="header-anchor" href="#v-text"><span>v-text</span></a></h3><blockquote><p>用法：<code>&lt;h1 v-text=&quot;expresstion&quot;&gt;Yes!&lt;/h1&gt;</code></p></blockquote>`,28)),n("ul",null,[n("li",null,"防止页面首次加载时 "+p()+" 出现在页面上。将对象中数据变量值显示在绑定的标签内容上。",1)]),s[1]||(s[1]=a(`<h2 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令"><span>自定义指令</span></a></h2><blockquote><p>如果想实现的功能不满足上述这些，可以自己定义一些指令<br></p></blockquote><p>例如这个情景:当页面加载时，该元素将获得焦点</p><h3 id="全局注册" tabindex="-1"><a class="header-anchor" href="#全局注册"><span>全局注册</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 注册一个全局自定义指令 \`v-focus\`</span></span>
<span class="line">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 当被绑定的元素插入到 DOM 中时……</span></span>
<span class="line">  <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 聚焦元素</span></span>
<span class="line">    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="局部组件注册" tabindex="-1"><a class="header-anchor" href="#局部组件注册"><span>局部组件注册</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">focus</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 指令的定义</span></span>
<span class="line">    <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>然后你可以在模板中任何元素上使用新的 v-focus property，如下：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-focus</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,10))])}const u=e(o,[["render",i],["__file","VUEdezhiling.html.vue"]]),d=JSON.parse('{"path":"/blogs/VUE2/VUEdezhiling.html","title":"VUE的指令","lang":"en-US","frontmatter":{"title":"VUE的指令","date":"2022-7-19","autoSort":19,"tags":["VUE2"],"categories":["VUE2"]},"headers":[{"level":2,"title":"常用指令","slug":"常用指令","link":"#常用指令","children":[{"level":3,"title":"v-if","slug":"v-if","link":"#v-if","children":[]},{"level":3,"title":"v-else","slug":"v-else","link":"#v-else","children":[]},{"level":3,"title":"v-show","slug":"v-show","link":"#v-show","children":[]},{"level":3,"title":"v-for","slug":"v-for","link":"#v-for","children":[]},{"level":3,"title":"v-bind","slug":"v-bind","link":"#v-bind","children":[]},{"level":3,"title":"v-model","slug":"v-model","link":"#v-model","children":[]},{"level":3,"title":"v-on","slug":"v-on","link":"#v-on","children":[]},{"level":3,"title":"v-text","slug":"v-text","link":"#v-text","children":[]}]},{"level":2,"title":"自定义指令","slug":"自定义指令","link":"#自定义指令","children":[{"level":3,"title":"全局注册","slug":"全局注册","link":"#全局注册","children":[]},{"level":3,"title":"局部组件注册","slug":"局部组件注册","link":"#局部组件注册","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]}],"git":{"createdTime":1728696783000,"updatedTime":1728696783000,"contributors":[{"name":"刘政杨","email":"314781333@qq.com","commits":1}]},"filePathRelative":"blogs/VUE2/VUE的指令.md"}');export{u as comp,d as data};
