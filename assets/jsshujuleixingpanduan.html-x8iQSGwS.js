import{_ as a,c as s,a as e,o as t}from"./app-BJ3_yarB.js";const l={};function p(c,n){return t(),s("div",null,n[0]||(n[0]=[e(`<h2 id="js的数据类型" tabindex="-1"><a class="header-anchor" href="#js的数据类型"><span>JS的数据类型</span></a></h2><h3 id="js的数据类型分为以下两类" tabindex="-1"><a class="header-anchor" href="#js的数据类型分为以下两类"><span>JS的数据类型分为以下两类</span></a></h3><ol><li>基本（原始）类型：String Number Boolean Null Undefined Symbol BigInt</li><li>引用（对象）类型：Object Array Date Function RegExp 基本包装类型</li></ol><h3 id="基本类型和引用类型的区别" tabindex="-1"><a class="header-anchor" href="#基本类型和引用类型的区别"><span>基本类型和引用类型的区别</span></a></h3><ol><li>储蓄方式不同，基本数据储存在<code>栈内存</code>，引用类型存储在<code>堆内存</code>（引入地址还是在栈内存上）</li><li>原始类型不能携带属性和方法 <a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%89length%E5%B1%9E%E6%80%A7">question</a></li></ol><h3 id="为什么字符串有length属性" tabindex="-1"><a class="header-anchor" href="#为什么字符串有length属性"><span>为什么字符串有length属性 ？</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token string">&#39;123&#39;</span></span>
<span class="line">a<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">//undefined</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上代码a是一个字符串,向a上挂b属性，打印确实undefined而s.length打印确实3。<br> 因为<code>let a=&#39;123&#39;</code>等于<code>let a =new String(123)</code>.他被new啦就一定会返回一个对象，所以a可以被称为字符串对象,<code>字符串被创建出来的时候,会返回携带字符串对象</code><br> 所以他具备方法和属性,但是被计算机访问的时候，发现他是一个类型，就会自动delete删除，所以他就访问不到啦，所以打印a.b的时候是undefined不是报错，至于为什么a.length可以打印，只能说不会报错。不能说真的有这个属性</p><h2 id="js的类型判断方式" tabindex="-1"><a class="header-anchor" href="#js的类型判断方式"><span>JS的类型判断方式</span></a></h2><h3 id="object-prototype-tostring-call" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring-call"><span>Object.prototype.toString.call()</span></a></h3><blockquote><p>嘎嘎厉害的判断方式,单词越长语法越牛,这个方法可以判断任何的类型,返回的是一个字符串 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b55591891ad4665a0c28df4cc6439a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="dd"></p></blockquote><p>上图所示他会返回一个字符串，但是我们只想要后面的内容，我们可以用slice方法封装一个函数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">myflag</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，就能得到变量类型的字符串，如下图返回&#39;Boolean&#39; <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/210cb6ed1eac419aa338f6a17510b6f2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt=""></p><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span>typeof()</span></a></h3><blockquote><p>这个方法用来准确判断基本类型，返回一个字符串</p></blockquote><ul><li>为什么判断null会返回&#39;object&#39; <ul><li>因为null转换为二进制时全是000000···，又因为object二进制是以000开头，所以000开头的会被计算机判定为object，null也就阴差阳错的被判定成object类型了。</li></ul></li><li>判断引用数据类型会返回&#39;object&#39;，函数会返回&#39;function&#39;</li></ul><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span>instanceof()</span></a></h3><blockquote><p>判断类型为<code>引用类型</code>，返回一个布尔值，左侧是判断的值，右侧是数据类型</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6003e3f2f954ae0a0bacfc46352202e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt=""></p><h3 id="特定的判断方法" tabindex="-1"><a class="header-anchor" href="#特定的判断方法"><span>特定的判断方法</span></a></h3><ul><li>数组的方法<code>isArray()</code>返回布尔值</li><li>不合法数字<code>isNaN()</code>,合法数字false不合法tru</li></ul><br><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0665d735800431a916af66a230876af~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt=""><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/689cecc15a7049b387ac7470afa2ea45~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt=""><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14e98c62f99148f38d315123010fb8fd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt=""></p><h2 id="js的类型转换" tabindex="-1"><a class="header-anchor" href="#js的类型转换"><span>JS的类型转换</span></a></h2><h3 id="显示类型转换-人为操作" tabindex="-1"><a class="header-anchor" href="#显示类型转换-人为操作"><span>显示类型转换，人为操作</span></a></h3><ul><li>转化为 Number 类型：Number() / parseFloat() / parseInt()</li><li>转化为 String 类型：String() / toString()</li><li>转化为 Boolean 类型: Boolean()<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60e869154bf3479eadc1cb7598c9834d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt=""></li></ul>`,27)]))}const i=a(l,[["render",p],["__file","jsshujuleixingpanduan.html.vue"]]),r=JSON.parse('{"path":"/blogs/JavaScript/jsshujuleixingpanduan.html","title":"js数据类型判断","lang":"en-US","frontmatter":{"title":"js数据类型判断","date":"2022-8-8","autoSort":17,"tags":["JavaScript"],"categories":["JavaScript"]},"headers":[{"level":2,"title":"JS的数据类型","slug":"js的数据类型","link":"#js的数据类型","children":[{"level":3,"title":"JS的数据类型分为以下两类","slug":"js的数据类型分为以下两类","link":"#js的数据类型分为以下两类","children":[]},{"level":3,"title":"基本类型和引用类型的区别","slug":"基本类型和引用类型的区别","link":"#基本类型和引用类型的区别","children":[]},{"level":3,"title":"为什么字符串有length属性 ？","slug":"为什么字符串有length属性","link":"#为什么字符串有length属性","children":[]}]},{"level":2,"title":"JS的类型判断方式","slug":"js的类型判断方式","link":"#js的类型判断方式","children":[{"level":3,"title":"Object.prototype.toString.call()","slug":"object-prototype-tostring-call","link":"#object-prototype-tostring-call","children":[]},{"level":3,"title":"typeof()","slug":"typeof","link":"#typeof","children":[]},{"level":3,"title":"instanceof()","slug":"instanceof","link":"#instanceof","children":[]},{"level":3,"title":"特定的判断方法","slug":"特定的判断方法","link":"#特定的判断方法","children":[]}]},{"level":2,"title":"JS的类型转换","slug":"js的类型转换","link":"#js的类型转换","children":[{"level":3,"title":"显示类型转换，人为操作","slug":"显示类型转换-人为操作","link":"#显示类型转换-人为操作","children":[]}]}],"git":{"createdTime":1728696783000,"updatedTime":1728696783000,"contributors":[{"name":"刘政杨","email":"314781333@qq.com","commits":1}]},"filePathRelative":"blogs/JavaScript/js数据类型判断.md"}');export{i as comp,r as data};
