import{_ as r,c as o,a as e,b as n,d as s,e as l,w as c,r as t,o as u}from"./app-BJ3_yarB.js";const d={},h={href:"https://imgtu.com/i/jx7qHO",target:"_blank",rel:"noopener noreferrer"};function k(v,a){const p=t("ExternalLinkIcon"),i=t("RouteLink");return u(),o("div",null,[a[4]||(a[4]=e('<h2 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍"><span>基本介绍</span></a></h2><p>传统的页面通过超链接实现页面的切换和跳转,在vue中是通过路径上切换实现组件切换,因为vue是单页面应用,只有一个index.html页面切换都是用vue-router来实现</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><blockquote><p>如果用的vue-cli搭建项目，搭建时可以配置安装，如果安装后可以忽略这一步</p></blockquote><p>安装命令: <code>npm i vue-router</code></p><h2 id="router组件" tabindex="-1"><a class="header-anchor" href="#router组件"><span>router组件</span></a></h2><h3 id="router-link" tabindex="-1"><a class="header-anchor" href="#router-link"><span>router-link</span></a></h3><p>声明式跳转，可以通过点击实现路由跳转<br> 属性:</p><ul><li><p>to 跳转的路由路径</p></li><li><p>tag 渲染页面上的标签 （div button 等...配置什么页面上显示什么标签）</p></li><li><p>replace 点击会调用router.replace() 而不是 router.push()，导航后不会留下 history 记录。</p></li><li><p>append在原来的路径上添加器路径如：我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</p></li><li><p>active-class 定义class名，这里不是class定义而是使用active-class</p></li><li></li></ul><h3 id="router-view" tabindex="-1"><a class="header-anchor" href="#router-view"><span>router-view</span></a></h3><p>用来显示路由组件，必须定义，要不你配置的路由在哪里显示？ 一般放在路由的根组件上，例如：app.vue中</p><h2 id="获取路由" tabindex="-1"><a class="header-anchor" href="#获取路由"><span>获取路由</span></a></h2><h3 id="完整路由-this-router" tabindex="-1"><a class="header-anchor" href="#完整路由-this-router"><span>完整路由 this.$router</span></a></h3>',13)),n("p",null,[a[1]||(a[1]=s("可以访问路由所有挂载的实例 ")),n("a",h,[a[0]||(a[0]=n("img",{src:"https://s1.ax1x.com/2022/07/26/jx7qHO.md.png",alt:"jx7qHO.md.png"},null,-1)),l(p)])]),a[5]||(a[5]=n("h3",{id:"当前路由-this-route",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#当前路由-this-route"},[n("span",null,"当前路由 this.$route")])],-1)),a[6]||(a[6]=n("p",null,"访问当前路由挂载的实例路由对象",-1)),a[7]||(a[7]=n("h2",{id:"路由跳转",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#路由跳转"},[n("span",null,"路由跳转")])],-1)),n("ul",null,[n("li",null,[l(i,{to:"/blogs/VUE2/#router-link"},{default:c(()=>a[2]||(a[2]=[s("声明式跳转")])),_:1})]),a[3]||(a[3]=n("li",null,[s("逻辑跳转 "),n("ul",null,[n("li",null,[n("p",null,"this.$router.push()"),n("ul",null,[n("li",null,"有历史记录"),n("li",null,"可以通过history.go(-1)返回上一个页面")])]),n("li",null,[n("p",null,"this.$router.replace()"),n("ul",null,[n("li",null,"没有历史记录")])])])],-1))]),a[8]||(a[8]=e(`<h2 id="路由传参" tabindex="-1"><a class="header-anchor" href="#路由传参"><span>路由传参</span></a></h2><ul><li>第一种 <ul><li>this.$router({path:&#39;路径&#39;,query:{}})</li></ul></li><li>第二种 <ul><li>this.$router({name:&#39;路径&#39;,params:{}})</li></ul></li></ul><blockquote><p>query参数需要path作为跳转条件,params需要name作为跳转条件</p></blockquote><h2 id="动态路由" tabindex="-1"><a class="header-anchor" href="#动态路由"><span>动态路由</span></a></h2><blockquote><p>在路由表中配置path时再结尾加上/:</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/tab/:id&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;tab&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">component</span><span class="token operator">:</span> Tab</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过<code>/tab/任意</code>访问该组件</p><h2 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向"><span>重定向</span></a></h2><blockquote><p>重定向通过 routes 配置来完成，下面例子是从 /a 重定向到 /b</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/a&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&#39;/b&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由守卫" tabindex="-1"><a class="header-anchor" href="#路由守卫"><span>路由守卫</span></a></h2><blockquote><p>类似生命周期，路由状态发生变换时候会触发对应的钩子 也可以叫路由拦截,好比有个保安在看门，你有权限就可以进入房子，没有权限就被拒之门外</p></blockquote><h3 id="全局守卫" tabindex="-1"><a class="header-anchor" href="#全局守卫"><span>全局守卫</span></a></h3><h4 id="beforeeach" tabindex="-1"><a class="header-anchor" href="#beforeeach"><span>beforeEach</span></a></h4><p>在路由跳转前触发，参数包括to,from,next 参数</p><ul><li>to 将要进入离开的路由</li><li>from 来自哪个页面</li><li>next 通过,决定是否展示你要看到的路由页面</li></ul><h4 id="aftereach" tabindex="-1"><a class="header-anchor" href="#aftereach"><span>afterEach</span></a></h4><p>路由跳转完成后触发,在beforeEach之后局部守卫之前 参数</p><ul><li>to 将要访问的路径</li><li>from 代表从哪个路径跳转而来</li><li>next 通过,决定是否展示你要看到的路由页面</li></ul><h3 id="路由独享" tabindex="-1"><a class="header-anchor" href="#路由独享"><span>路由独享</span></a></h3><p>单个路由配置的时候也可以设置的钩子函数,只有一个钩子函数beforeEnter。 先执行完<code>beforEach</code>后再触发<code>beforEnter</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/foo&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">component</span><span class="token operator">:</span> Foo<span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件守卫" tabindex="-1"><a class="header-anchor" href="#组件守卫"><span>组件守卫</span></a></h3><p>跟生命周期差不多，相当于像组件中添加生命周期钩子函数</p><h4 id="beforerouteenter" tabindex="-1"><a class="header-anchor" href="#beforerouteenter"><span>beforeRouteEnter</span></a></h4><p>路由进入之前调用，该守卫内访问不到组件的实例，需要传递一个回调给next才可以访问</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 这里还无法访问到组件实例，this === undefined</span></span>
<span class="line">  <span class="token function">next</span><span class="token punctuation">(</span> <span class="token parameter">vm</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 通过 \`vm\` 访问组件实例</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="beforerouteupdate" tabindex="-1"><a class="header-anchor" href="#beforerouteupdate"><span>beforeRouteUpdate</span></a></h4><p>在当前路由改变时，并且该组件被复用时调用。可以访问this实例<br> 例如：带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，组件实例会被复用</p><h4 id="beforerouteleave" tabindex="-1"><a class="header-anchor" href="#beforerouteleave"><span>beforeRouteLeave</span></a></h4><p>导航离开该组件的对应路由时调用，可以访问组件实例this，参数包括to，from，next。</p>`,31))])}const m=r(d,[["render",k],["__file","luyou.html.vue"]]),f=JSON.parse('{"path":"/blogs/VUE2/luyou.html","title":"路由","lang":"en-US","frontmatter":{"title":"路由","date":"2022-7-26","autoSort":15,"tags":["VUE2"],"categories":["VUE2"]},"headers":[{"level":2,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"router组件","slug":"router组件","link":"#router组件","children":[{"level":3,"title":"router-link","slug":"router-link","link":"#router-link","children":[]},{"level":3,"title":"router-view","slug":"router-view","link":"#router-view","children":[]}]},{"level":2,"title":"获取路由","slug":"获取路由","link":"#获取路由","children":[{"level":3,"title":"完整路由 this.$router","slug":"完整路由-this-router","link":"#完整路由-this-router","children":[]},{"level":3,"title":"当前路由 this.$route","slug":"当前路由-this-route","link":"#当前路由-this-route","children":[]}]},{"level":2,"title":"路由跳转","slug":"路由跳转","link":"#路由跳转","children":[]},{"level":2,"title":"路由传参","slug":"路由传参","link":"#路由传参","children":[]},{"level":2,"title":"动态路由","slug":"动态路由","link":"#动态路由","children":[]},{"level":2,"title":"重定向","slug":"重定向","link":"#重定向","children":[]},{"level":2,"title":"路由守卫","slug":"路由守卫","link":"#路由守卫","children":[{"level":3,"title":"全局守卫","slug":"全局守卫","link":"#全局守卫","children":[]},{"level":3,"title":"路由独享","slug":"路由独享","link":"#路由独享","children":[]},{"level":3,"title":"组件守卫","slug":"组件守卫","link":"#组件守卫","children":[]}]}],"git":{"createdTime":1728696783000,"updatedTime":1728696783000,"contributors":[{"name":"刘政杨","email":"314781333@qq.com","commits":1}]},"filePathRelative":"blogs/VUE2/路由.md"}');export{m as comp,f as data};
